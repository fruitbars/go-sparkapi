package sparkapi

import (
	"encoding/json"
	"github.com/gorilla/websocket"
	"log"
	"time"
)

type AutoGeneratedRequest struct {
	Header struct {
		AppID string `json:"app_id"`
		UID   string `json:"uid"`
	} `json:"header"`
	Parameter struct {
		Chat struct {
			Domain      string  `json:"domain"`
			Temperature float64 `json:"temperature"`
			MaxTokens   int     `json:"max_tokens"`
			TopK        int     `json:"top_k"`
			Auditing    string  `json:"auditing"`
		} `json:"chat"`
	} `json:"parameter"`
	Payload struct {
		Message struct {
			Text []struct {
				Role    string `json:"role"`
				Content string `json:"content"`
			} `json:"text"`
		} `json:"message"`
		Functions struct {
			Text json.RawMessage `json:"text"`
		} `json:"functions"`
	} `json:"payload"`
}

type AutoGeneratedResponse struct {
	Header struct {
		Code    int    `json:"code"`
		Message string `json:"message"`
		Sid     string `json:"sid"`
		Status  int    `json:"status"`
	} `json:"header"`
	Payload struct {
		Choices struct {
			Status int `json:"status"`
			Seq    int `json:"seq"`
			Text   []struct {
				Content      string `json:"content"`
				Role         string `json:"role"`
				ContentType  string `json:"content_type"`
				FunctionCall struct {
					Arguments string `json:"arguments"`
					Name      string `json:"name"`
				} `json:"function_call"`
				Index int `json:"index"`
			} `json:"text"`
		} `json:"choices"`
		Usage struct {
			Text struct {
				QuestionTokens   int `json:"question_tokens"`
				PromptTokens     int `json:"prompt_tokens"`
				CompletionTokens int `json:"completion_tokens"`
				TotalTokens      int `json:"total_tokens"`
			} `json:"text"`
		} `json:"usage"`
	} `json:"payload"`
}

// Client is a SparkAPI client.
type Client struct {
	AppID     string
	APIKey    string
	APISecret string
}

// NewClient creates a new SparkAPI client.
func NewClient(appID, apiKey, apiSecret string) *Client {
	return &Client{
		AppID:     appID,
		APIKey:    apiKey,
		APISecret: apiSecret,
	}
}

// CallSpark calls the SparkAPI with the provided parameters.
func (c *Client) CallSpark(prompt string, temperature float64, topk int, maxtokens int, version string, system string) (string, error) {
	// The implementation details from your previous code
	// ...
	d := websocket.Dialer{
		HandshakeTimeout: 5 * time.Second,
	}

	urlstring := getHostURL(version)
	authURL := AssembleAuthURL("GET", urlstring, c.APIKey, c.APISecret)
	log.Println(authURL)
	conn, resp, err := d.Dial(authURL, nil)
	if err != nil {
		log.Printf("Failed to establish WebSocket connection: %v, %s, %s\n", err, readResp(resp), authURL)
		return "", err
	}
	defer conn.Close()

	if resp.StatusCode != 101 {
		log.Fatalf("WebSocket handshake failed: %s", readResp(resp))
		return "", err
	}

	data := genReqJson(c.AppID, prompt, temperature, topk, maxtokens, version, system)

	if err := conn.WriteJSON(data); err != nil {
		log.Printf("Failed to send message: %v\n", err)
		return "", err
	}
	jsond, _ := json.Marshal(data)
	log.Println(string(jsond))

	var answer string

	for {
		_, msg, err := conn.ReadMessage()
		if err != nil {
			log.Println("Read message error:", err)
			break
		}

		log.Println(string(msg))

		var response AutoGeneratedResponse
		if err := json.Unmarshal(msg, &response); err != nil {
			log.Println("Error parsing JSON:", err)
			break
		}

		if response.Header.Code != 0 {
			log.Printf("API error response: %v\n", response)

			return response.Header.Message, err
		}

		answer += response.Payload.Choices.Text[0].Content

		if response.Payload.Choices.Status == 2 {
			//totalTokens := response.Payload.Usage.Text.TotalTokens
			if response.Payload.Choices.Text[0].FunctionCall.Arguments != "" {
				jdata, _ := json.MarshalIndent(response, "", "    ")
				answer = string(jdata)
			}
			log.Println("Received final result.")
			break
		}
	}

	return answer, err
}

func getHostURL(version string) (hostURL string) {
	switch version {
	case "v1":
		hostURL = "ws://spark-api.xf-yun.com/v1.1/chat"
	case "v2":
		hostURL = "ws://spark-api.xf-yun.com/v2.1/chat"
	case "v3":
		hostURL = "ws://spark-api.xf-yun.com/v3.1/chat"
	}

	return
}

func genReqJson(appID string, prompt string, temperature float64, topk int, maxtokens int, version string, system string) *AutoGeneratedRequest {
	var req AutoGeneratedRequest
	// 为Text字段赋值
	if system != "" {
		req.Payload.Message.Text = append(req.Payload.Message.Text, struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		}{
			Role:    "system",
			Content: system,
		})
	}

	req.Payload.Message.Text = append(req.Payload.Message.Text, struct {
		Role    string `json:"role"`
		Content string `json:"content"`
	}{
		Role:    "user",
		Content: prompt,
	})

	req.Header.AppID = appID
	req.Header.UID = "12345"

	switch version {
	case "v1":
		req.Parameter.Chat.Domain = "general"
	case "v2":
		req.Parameter.Chat.Domain = "generalv2"
	case "v3":
		req.Parameter.Chat.Domain = "generalv3"
	}

	req.Parameter.Chat.Temperature = temperature
	req.Parameter.Chat.TopK = topk
	req.Parameter.Chat.MaxTokens = maxtokens
	req.Parameter.Chat.Auditing = "default"

	dstring, _ := json.MarshalIndent(&req, "", " ")
	log.Println(string(dstring))

	return &req
}
