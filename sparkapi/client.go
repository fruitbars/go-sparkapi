package sparkapi

import (
	"encoding/json"
	"github.com/fruitbars/go-sparkapi"
	"github.com/gorilla/websocket"
	"log"
	"time"
)

type SparkClient struct {
	AppID     string
	APIKey    string
	APISecret string
	Logger    *log.Logger
	BaseURL   string
	Domain    string
}

func NewSparkClient(appID, apiKey, apiSecret string, logger *log.Logger, baseURL string, domain string) *SparkClient {
	return &SparkClient{
		AppID:     appID,
		APIKey:    apiKey,
		APISecret: apiSecret,
		Logger:    logger,
		BaseURL:   baseURL,
		Domain:    domain,
	}
}

func (c *SparkClient) CallSpark(prompt string, temperature float64, topk int, maxtokens int, version string, system string) (string, error) {
	urlstring := c.BaseURL
	if urlstring == "" {
		urlstring = sparkapi.getHostURL(version)
	}

	domain := c.Domain
	if domain == "" {
		domain = sparkapi.getDefaultDomain(version)
	}

	d := websocket.Dialer{
		HandshakeTimeout: 5 * time.Second,
	}

	authURL := AssembleAuthURL("GET", urlstring, c.APIKey, c.APISecret)
	c.Logger.Println(authURL)
	conn, resp, err := d.Dial(authURL, nil)
	if err != nil {
		c.Logger.Printf("Failed to establish WebSocket connection: %v, %s, %s\n", err, sparkapi.readResp(resp), authURL)
		return "", err
	}
	defer conn.Close()

	if resp.StatusCode != 101 {
		c.Logger.Fatalf("WebSocket handshake failed: %s", sparkapi.readResp(resp))
		return "", err
	}

	data := sparkapi.genReqJson(c.AppID, prompt, temperature, topk, maxtokens, version, system, domain)

	if err := conn.WriteJSON(data); err != nil {
		c.Logger.Printf("Failed to send message: %v\n", err)
		return "", err
	}
	jsond, _ := json.Marshal(data)
	c.Logger.Println(string(jsond))

	var answer string

	for {
		_, msg, err := conn.ReadMessage()
		if err != nil {
			c.Logger.Println("Read message error:", err)
			break
		}

		c.Logger.Println(string(msg))

		var response AutoGeneratedResponse
		if err := json.Unmarshal(msg, &response); err != nil {
			c.Logger.Println("Error parsing JSON:", err)
			break
		}

		if response.Header.Code != 0 {
			c.Logger.Printf("API error response: %v\n", response)
			return response.Header.Message, err
		}

		answer += response.Payload.Choices.Text[0].Content

		if response.Payload.Choices.Status == 2 {
			if response.Payload.Choices.Text[0].FunctionCall.Arguments != "" {
				jdata, _ := json.MarshalIndent(response, "", "    ")
				answer = string(jdata)
			}
			c.Logger.Println("Received final result.")
			break
		}
	}

	return answer, err
}
