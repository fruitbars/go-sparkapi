package sparkapi

import (
	"encoding/json"
)

type AutoGeneratedRequest struct {
	Header struct {
		AppID string `json:"app_id"`
		UID   string `json:"uid"`
	} `json:"header"`
	Parameter struct {
		Chat struct {
			Domain      string  `json:"domain"`
			Temperature float64 `json:"temperature"`
			MaxTokens   int     `json:"max_tokens"`
			TopK        int     `json:"top_k"`
			Auditing    string  `json:"auditing"`
		} `json:"chat"`
	} `json:"parameter"`
	Payload struct {
		Message struct {
			Text []struct {
				Role    string `json:"role"`
				Content string `json:"content"`
			} `json:"text"`
		} `json:"message"`
		Functions struct {
			Text json.RawMessage `json:"text"`
		} `json:"functions"`
	} `json:"payload"`
}

func getHostURL(version string) string {
	switch version {
	case "v1":
		return "wss://spark-api.xf-yun.com/v1.1/chat"
	case "v2":
		return "wss://spark-api.xf-yun.com/v2.1/chat"
	case "v3":
		return "wss://spark-api.xf-yun.com/v3.1/chat"
	default:
		return ""
	}
}

func getDefaultDomain(version string) string {
	switch version {
	case "v1":
		return "general"
	case "v2":
		return "generalv2"
	case "v3":
		return "generalv3"
	default:
		return ""
	}
}

func genReqJson(appID string, prompt string, temperature float64, topk int, maxtokens int, version string, system string, domain string) *AutoGeneratedRequest {
	var req AutoGeneratedRequest

	if system != "" {
		req.Payload.Message.Text = append(req.Payload.Message.Text, struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		}{
			Role:    "system",
			Content: system,
		})
	}

	req.Payload.Message.Text = append(req.Payload.Message.Text, struct {
		Role    string `json:"role"`
		Content string `json:"content"`
	}{
		Role:    "user",
		Content: prompt,
	})

	req.Header.AppID = appID
	req.Header.UID = "12345"
	req.Parameter.Chat.Domain = domain
	req.Parameter.Chat.Temperature = temperature
	req.Parameter.Chat.TopK = topk
	req.Parameter.Chat.MaxTokens = maxtokens
	req.Parameter.Chat.Auditing = "default"

	return &req
}
